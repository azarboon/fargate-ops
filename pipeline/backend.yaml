Parameters: 
  AccountId: 
    Type: String
  AppName: 
    Type: String
  ArtifactsBucket: 
    Type: String
  Branch: 
    Type: String
  Cmk: 
    Type: String
  CodebuildRole: 
    Type: String
  Env: 
    Type: String
  NotificationTopic: 
    Type: String
  PipeLineRole: 
    Type: String
  GitRepository: 
    Type: String
  ServiceName:
    Type: String
  ClusterName:
    Type: String

 




    
# Enforces manual approval for deployment to production environment
Conditions: 
  IsProd: !Equals [ !Ref Env, prod ]


Resources: 

  BuildProject: 
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Description: "Builds and packages application for deployment"
      EncryptionKey: !Ref Cmk
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables: 
          - 
            Name: BucketName
            Value: !Ref ArtifactsBucket
          - 
            Name: AppName
            Value: !Ref AppName
          -
            Name: REPOSITORY_URI
            Value: !Join [ "", [!Ref AccountId, ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !Ref Repo] ]
          -
            Name: SECOND_ACCOUNT
            Value: !Ref AccountId
        Image: "aws/codebuild/standard:2.0"
        Type: LINUX_CONTAINER
      LogsConfig: 
        CloudWatchLogs: 
          GroupName: CodebuildProject
          Status: ENABLED
          StreamName: latest
      Name: !Sub "${AppName}-${Env}-backend"
      ServiceRole: !Ref CodebuildRole
      Source: 
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - printenv
                - aws sts get-caller-identity
                - echo "Getting Docker login string and logging in to ECR..."
                - $(aws ecr get-login --registry-ids $SECOND_ACCOUNT --region $AWS_DEFAULT_REGION --no-include-email)
            build:
              commands:
                - docker pull nginx:latest
                - docker tag nginx:latest $REPOSITORY_URI:latest
            post_build:
              commands:
                - docker push $REPOSITORY_URI:latest
                - printf '[{"name":"%s","imageUri":"%s"}]' $AppName $REPOSITORY_URI:latest > imagedefinitions.json
                - cat imagedefinitions.json
          artifacts:
            files: imagedefinitions.json
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
    Type: "AWS::CodeBuild::Project"    
  
    
  Pipeline:   
    Properties: 
      # IMPORTANT: if you change pipeline name, you also need to update EventPattern in NotificationRule
      Name: !Sub ${AppName}-${Env}
      RoleArn: !Ref PipeLineRole
      Stages: 
        - Name: Source
          Actions: 
            - ActionTypeId: 
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: fghgfdfjdg
                Repo: !Ref GitRepository
                PollForSourceChanges: true
                Branch: !Ref Branch
                OAuthToken: 7857a4e3e464deabc01b3c334913d1a2863e772f               
              Name: Code
              OutputArtifacts: 
                - Name: SourceArtifact
                
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName:
                  # Following refers to logical id of the AWS::CodeBuild::Project. 
                  Ref: BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              Name: Build
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
  
        - Name: Deploy
          Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ClusterName
                ServiceName: !Ref ServiceName
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact
              Name: Deploy
              RoleArn: !Join [ "", ["arn:aws:iam::", !Ref AccountId, ":role/PipelineSupportRole"] ]
  
      ArtifactStore: 
        EncryptionKey:
          Id: !Ref Cmk
          Type: KMS
        Location:  
          !Ref ArtifactsBucket
        Type: S3            
    Type: AWS::CodePipeline::Pipeline 


  Repo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref AppName